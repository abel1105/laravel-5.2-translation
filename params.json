{
  "name": "Laravel-5.2-translation",
  "tagline": "",
  "body": "> *重要： 本章節目前是穩定的版本。讓我們知道你喜歡什麼，或者可能不喜歡的地方。我們將定期更新所有章節，以修復漏洞和錯誤。*\r\n\r\n\r\n# 章節一：安裝Laravel\r\n\r\n有非常多方法來安裝 Laravel 。我們可以直接安裝 Laravel 在我們的本機上，或是使用伺服器懶人包來安裝，例如：MAMP、XAMPP ...等。\r\n我們可以有非常多選擇。\r\n\r\n在這本書中，我會教你怎麼用最受歡迎的方法：**Laravel Homestead**。\r\n\r\n## 介紹 CLI (命令列介面)\r\n\r\n> 如果你曾未聽過 CLI 、終端機或 Git（版本控制系統），請繼續看該段落；如果你知道如何使用CLI，請跳過該段落。\r\n\r\n若要使用 Laravel ，你一定得知道該如何使用 CLI ，因為過程中會需要多次操作 CLI 。\r\n\r\n### MAC OSX 的 CLI \r\n\r\n幸運的，在Mac上你可以找到一個好用的 CLI 叫 **終端機(Terminal)** 在 **/應用程式/工具程式(/Applications/Utilities)** 資料夾裡。\r\n\r\n大部分你需要在 **終端機(Terminal)** 做的事，就是輸入一段指令後，然後按下 **Return** 鍵去執行指令。\r\n\r\n除此之外，你也可以使用[iTerms 2](https://www.iterm2.com)。\r\n\r\n### Windows 的 CLI\r\n\r\n不幸運的，在Windows系統的預設 CLI (cmd.exe) 不太好用，你可能需要安裝另外一個。\r\n\r\n最常在Windows上使用的是 **Git Bash** ，你可以在下面的連結下載並安裝他。\r\n\r\n[http://msysgit.github.io](http://msysgit.github.io)\r\n\r\n大部分你需要在 **Git Bash** 做的事，就是輸入一段指令後，然後按下 **Return** 鍵去執行指令。\r\n\r\n### Linux 的 CLI\r\n\r\n在 Linux 上, 使用得 CLI 叫做 **Terminal** 或 **Konsole**。如果你知道怎麼安裝跟使用Linux，我猜你一定早就知道怎麼樣使用 CLI 了。\r\n\r\n## 透過 Homestead 安裝 Laravel\r\n\r\n### 什麼是 Homestead ?\r\n\r\n現在，很多開發者使用虛擬機（VM）來開發動態網站跟應用程式。你可以在虛擬機上使用伺服器、資料庫與你的程式碼。你可以創建多個虛擬機實例在不同的專案下，如果你不需要這個虛擬機的時候，你可以放心的將它移除而不影響任何東西，你甚至可以重新創建一個虛擬機在幾分鐘內！\r\n\r\n我們稱之為：「虛擬化」。\r\n\r\n有非常多方法來達到虛擬化，但最流行的是 Oracle 的 VirtualBox 。 只要我們喜歡，VirtualBox 可以幫助我們安裝和運行多台虛擬機在Windows，Mac，Linux或Solaris的操作系統。然後，我們將使用一個叫做 Vagrant 的工具來管理與配置我們的虛擬開發環境。\r\n\r\n在2014年，Laravel 的發明者，Taylor Otwell 引進了 Homestead 的方法。\r\n\r\nHomestead 是一個以 Vagrant 為基礎的 Ubuntu 虛擬機 (VM)。它包含了所有我們需要用來開發 Laravel 應用程式的東西。意思是，只要我們安裝 Homestead，我們就已經有了 PHP、Nginx、資料庫與其他程式的一台虛擬機。我們就可以立即開始創建我們的 Laravel 應用程式。\r\n\r\n下面是所有安裝的程式：\r\n\r\n- Ubuntu 14.04\r\n- PHP 5.6\r\n- HHVM\r\n- Nginx\r\n- MySQL\r\n- Postgres\r\n- Node (包含 Bower, Grunt, and Gulp)\r\n- Redis\r\n- Memcached\r\n- Beanstalkd\r\n- Laravel Envoy\r\n- Fabric + HipChat 擴充套件\r\n\r\n### 如何安裝 Homestead ?\r\n\r\n有兩種方法來安裝 Homestead。\r\n\r\n**方法一：** 使用Composer。\r\n\r\n**方法二(新)：** 使用Git Clone。\r\n\r\n在2015年五月 Laravel 的官方文件更新後，上面推薦的方法是使用 Git 來安裝 Homestead。\r\n\r\n新的方法比較好，速度也比較快。\r\n\r\n當然，如果你喜歡的話你也可以選擇舊的方法。\r\n\r\n### 使用方法一安裝 Homestead (需要 Composer)\r\n\r\n> **註解：** 這是舊的方法，如果你還未安裝 Homestead，你應該用方法二來安裝！\r\n\r\n透過下面四個步驟來安裝 Homestead。\r\n\r\n步驟一： 安裝 VirtualBox\r\n\r\n步驟二： 安裝 Vagrant\r\n\r\n步驟三： 安裝 Composer\r\n\r\n步驟四： 安裝 Homestead\r\n\r\n讓我們從安裝 VirtualBox 與 Vagrant 開始。\r\n\r\n#### 步驟一 - 安裝 VirtualBox\r\n\r\n首先，我們需要先去：\r\n\r\n[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)\r\n\r\n選擇一個你操作系統的 VirtualBox 來安裝。\r\n\r\n記得確認你下載符合你操作系統的正確版本。\r\n\r\n**穩定的版本是 4.3.28**。 你也可以使用新的版本，但如果你有任何問題，試試看這個版本。\r\n\r\n如果你是使用 Windows，雙擊兩下 .exe 的安裝檔案來安裝 VirtualBox。\r\n\r\n如果你是使用 Mac，打開 VirtualBox .dmg 檔，然後再點擊 .pkg 檔來安裝。\r\n\r\n![Installing VirtualBox](http://learninglaravel.net/img/book/chap1-pic12.png)\r\n\r\n\r\n#### 步驟二 - 安裝 Vagrant\r\n\r\n下一步是安裝 Vagrant，請前往：\r\n\r\n[http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html)\r\n\r\n如果你是使用 Mac，下載 .dmg 檔案，打開下載的檔案，點擊 Vagrant.pkg 檔來安裝。\r\n\r\n\r\n![Installing Vagrant](http://learninglaravel.net/img/book/chap1-pic5.png)\r\n\r\n\r\n如果你還是不知道怎麼安裝，下面有 Vagrant 官方的安裝教學。\r\n\r\n[http://docs.vagrantup.com/v2/installation](http://docs.vagrantup.com/v2/installation)\r\n\r\n#### 步驟三 - 安裝 Composer\r\n\r\nComposer 是什麼？ Composer 是一個跨平台的 PHP 依賴性管理工具。 我們可以透過 Composer 來安裝、移除、更新 PHP 函式庫。你會透過本書來學到更多。現在，我們需要安裝 Composer 來使用它安裝 Homestead。\r\n\r\n**給 Mac 的使用者**\r\n\r\n你可以在這找到官方的安裝教程：\r\n\r\n[https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx)\r\n\r\n如果要安裝 Composer，我們必須使用 終端機（Terminal）應用程式，或是其他終端模擬器，例如：iTerms。在 Mac 上，你可以在**應用程式->工具程式->終端機** 找到它。\r\n\r\n\r\n大部分你需要在 終端機(Terminal) 做的事，就是輸入一段指令後，然後按下 Return 鍵去執行指令。\r\n\r\n讓我們開始透過執行命令來安裝 Composer：\r\n\r\n\r\n    curl -s https://getcomposer.org/installer | php\r\n\r\n\r\n如果你看到下面這個錯誤：\r\n\r\n\r\n    The detect_unicode setting must be disabled.\r\n\r\n\r\n\r\n改用下面這行命令\r\n\r\n~~~\r\ncurl -s getcomposer.org/installer | php -d detect_unicode=Off\r\n~~~\r\n\r\n程式安裝過程中會在你的工作目錄下載 composer.phar。如果想要在系統中任何地方都能輕鬆存取 composer，你需要將 composer.phar 移動到 /usr/local/bin 這個資料夾，透過執行下面這個命令來達到：\r\n\r\n~~~\r\nsudo mv composer.phar /usr/local/bin/composer\r\n~~~\r\n\r\n如果他要求你的密碼，輸入你 Mac 使用者的密碼。\r\n\r\n> 備註：在 OSX Yosemite，沒有預設的 /usr 資料夾。如果你看到下面這個錯誤：\r\n\r\n> ~~~\r\n> /usr/local/bin/composer: No such file or directory\r\n> ~~~\r\n\r\n> 因此透過輸入下面的指令，來手動創建 /usr/local/bin 資料夾\r\n\r\n> ~~~\r\n> sudo mkdir /usr/local/bin\r\n> ~~~ \r\n\r\n我們可以透過在終端機輸入 **composer** 指令測試是否有成功安裝 Composer。\r\n\r\n如果成功的話，你會看到下面這樣的畫面：\r\n\r\n![Chap1 Pic 1](http://learninglaravel.net/img/book/chap1-pic1.png)\r\n\r\n恭喜！你的系統現在有 Composer 了！\r\n\r\n**給 Windows 的使用者**\r\n\r\n你可以在這找到官方的安裝教程：\r\n\r\n[https://getcomposer.org/doc/00-intro.md#installation-windows](https://getcomposer.org/doc/00-intro.md#installation-windows)\r\n\r\n安裝 Composer 在 Windows 最簡單與最快的方法就是下載下面的檔案然後安裝他：\r\n\r\n[Composer-Setup.exe](https://getcomposer.org/Composer-Setup.exe)\r\n\r\n![Install Composer on Windows](http://learninglaravel.net/img/book/chap1-pic2.png)\r\n\r\n跟隨著簡單的教程，你就會成功安裝 Composer。\r\n\r\n你現在透過執行一些指令來使用 Composer 安裝 Homestead。\r\n\r\n但是... 要怎麼在 Windows 上執行指令？\r\n\r\n如果要在 Windows 上執行命令，你需要安裝 Bash 模擬器(就像 Linux 與 Unix 上的 git 指令或 Mac 上的終端機應用程式)。而 Git Bash 是其中最受歡迎的。\r\n\r\n你可以在下面連結下載並安裝它：\r\n\r\n[http://msysgit.github.io](http://msysgit.github.io)\r\n\r\n在安裝過程，如果他有任何安裝選擇，記得維持原始的選項。\r\n\r\n大部分你需要在 Git Bash 做的事，就是輸入一段指令後，然後按下 **Enter** 鍵去執行指令。\r\n\r\n接著，打開 Git Bash 然後輸入 **composer**，再按 **Enter** 鍵！\r\n\r\n如果成功的話，你會看到下面這樣的畫面：\r\n\r\n![Chap1 Pic 1](http://learninglaravel.net/img/book/chap1-pic1.png)\r\n\r\n恭喜！你的系統現在有 Composer 了！\r\n\r\n#### 步驟四 - 安裝 Homestead (使用 Composer)\r\n\r\n你可以在下面連結找到 Homestead 的官方文件：\r\n\r\n[http://laravel.com/docs/4.2/homestead](http://laravel.com/docs/4.2/homestead)\r\n\r\n首先，我們需要新增一個 Vagrant Box，數入下面的指令在你的終端機（Git Bash）\r\n\r\n~~~\r\nvagrant box add laravel/homestead\r\n~~~\r\n\r\n> *注意：如果你有兩個以上的VM 應用程式（例如 VMware 或 Parallels），請確認選擇 VirtualBox：\r\n> ![Make sure to choose Virtual Box](http://learninglaravel.net/img/book/chap1-pic3.png)\r\n\r\n下載 Homestead 到你的系統會花數分鐘左右\r\n\r\n![Downloading Homestead](http://learninglaravel.net/img/book/chap1-pic4.png)\r\n\r\n下載完後，你可以開始透過 **Composer** 來安裝 **Homestead** 了，輸入下面的指令：\r\n\r\n~~~\r\ncomposer global require \"laravel/homestead=~2.0\"\r\n~~~\r\n\r\n![Downloading Homestead 2.0](http://learninglaravel.net/img/book/chap1-pic6.png)\r\n\r\n下一步開始初始化 Homestead ，創建一個 **Homestead.yaml** 的設定檔\r\n\r\n~~~\r\nhomestead init\r\n~~~\r\n\r\n> 注意：如果你看到這個錯誤：**\"command not found: homestead\"**。 你需要自行設定你的 **$PATH**。 請參考下面的關於 **$PATH** 的簡介，與如何修改它\r\n> \r\n> [http://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable](http://www.cyberciti.biz/faq/appleosx-bash-unix-change-set-path-environment-variable/)\r\n\r\n> 基本上，你需要加上下面這行指令在 **.bash_profile** 檔案或 **.zshrc file** 裡（如果你是使用 zsh 的話）的 $PATH 變數裡\r\n\r\n> ~~~\r\n> export PATH=~/.composer/vendor/bin/:$PATH\r\n> ~~~\r\n\r\n如果你可以成功跑 **homestead init** 這個指令，你可以透過輸入 **homestead edit** 指令來修改 **Homestead.yaml**。\r\n\r\n~~~\r\nhomestead edit\r\n~~~\r\n接著，你預設的文字編輯器會被系統自動打開，你會看到：\r\n\r\n![Homestead configuration file](http://learninglaravel.net/img/book/chap1-pic7.png)\r\n\r\n或著，如果你不要透過輸入指令的方式來打開，你可以在 **~/.homestead** 這個資料夾（資料夾預設是隱藏的，請確認你可以看到隱藏的檔案）找到 **Homestead.yaml** 這個檔案。以文字編輯器打開 **Homestead.yaml**。\r\n\r\n### 使用方法二安裝 Homestead (需要 Git)\r\n\r\n透過下面四個步驟來安裝 Homestead。\r\n\r\n步驟一： 安裝 VirtualBox\r\n\r\n步驟二： 安裝 Vagrant\r\n\r\n步驟三： 安裝 Homestead\r\n\r\n讓我們從安裝 VirtualBox 與 Vagrant 開始。\r\n\r\n#### 步驟一 - 安裝 VirtualBox\r\n\r\n首先，我們需要先去：\r\n\r\n[https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)\r\n\r\n選擇一個你操作系統的 VirtualBox 來安裝。\r\n\r\n記得確認你下載符合你操作系統的正確版本。\r\n\r\n**穩定的版本是 4.3.28**。 你也可以使用新的版本，但如果你有任何問題，試試看這個版本。\r\n\r\n如果你是使用 Windows，雙擊兩下 .exe 的安裝檔案來安裝 VirtualBox。\r\n\r\n如果你是使用 Mac，打開 VirtualBox .dmg 檔，然後再點擊 .pkg 檔來安裝。\r\n\r\n![Installing VirtualBox](http://learninglaravel.net/img/book/chap1-pic12.png)\r\n\r\n\r\n#### 步驟二 - 安裝 Vagrant\r\n\r\n下一步是安裝 Vagrant，請前往：\r\n\r\n[http://www.vagrantup.com/downloads.html](http://www.vagrantup.com/downloads.html)\r\n\r\n如果你是使用 Mac，下載 .dmg 檔案，打開下載的檔案，點擊 Vagrant.pkg 檔來安裝。\r\n\r\n\r\n![Installing Vagrant](http://learninglaravel.net/img/book/chap1-pic5.png)\r\n\r\n\r\n如果你還是不知道怎麼安裝，下面有 Vagrant 官方的安裝教學。\r\n\r\n[http://docs.vagrantup.com/v2/installation](http://docs.vagrantup.com/v2/installation)\r\n\r\n#### 步驟三 - 安裝 Homestead (使用 Git Clone)\r\n\r\n你可以簡單地透過 **複製 Homestead Repository(軟體庫)** 來安裝 Homestead。 \r\n\r\n如果你沒有 **Git** 在你的系統上，你會需要先安裝它。 \r\n\r\n> **注意：** 如果你不知道要如何執行指令，請先閱讀 **介紹 CLI (命令列介面)** 章節。\r\n\r\n**在 Mac 上安裝 Git**\r\n\r\n安裝 **Xcode Command Line Tools（Xcode 命令列工具）** 是安裝 Git 最簡單的方法，你只要輸入下面的指令即可：\r\n\r\n~~~\r\nxcode-select --install\r\n~~~\r\n點 **安裝** 來下載 **Command Line Tools （命令行工具）** 軟體包。\r\n\r\n或者，你可以找到 **OSX Git 安裝包** 在下面的網站：\r\n\r\n[http://git-scm.com/download/mac](http://git-scm.com/download/mac)\r\n\r\n**在 Windows 安裝 Git**\r\n\r\n你可以下載 **Windows 版的 Github**來安裝 Git：\r\n\r\n[https://windows.github.com](https://windows.github.com)\r\n\r\n**在 Linux/Unix 上安裝 Git**\r\n\r\n你可以透過輸入下面指令來安裝 Git：\r\n\r\n~~~\r\n$ sudo yum install git\r\n~~~\r\n\r\n如果你是 Debian 為基礎的版本系統，輸入下面的指令：\r\n\r\n~~~\r\n$ sudo apt-get install git\r\n~~~\r\n\r\n如果想要看更多相關資訊或其他方法，你可以看下面這個介紹：\r\n\r\n[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\r\n\r\n當你成功安裝完 Git，輸入下面的指令在你的終端機（或 Git Bash）：\r\n\r\n~~~\r\ngit clone https://github.com/laravel/homestead.git Homestead\r\n~~~\r\n\r\n![Cloning Homestead](http://learninglaravel.net/img/book/chap1-pic13.png)\r\n\r\n一旦下載完畢，透過輸入 **cd** 指令移動到 **Homestead 資料夾**：\r\n\r\n~~~\r\ncd Homestead\r\n~~~\r\n\r\n輸入下面的指令來創建 **Homestead.yaml** 檔案\r\n\r\n~~~\r\nbash init.sh\r\n~~~\r\n\r\n輸完指令後，**Homestead.yaml** 會被放在 **~/.homestead** 資料夾裡，使用文字編輯器來打開它。\r\n\r\n> 請注意 **~/.homestead** 資料夾預設是隱藏的，確認你可以看見隱藏的檔案。\r\n\r\n![Homestead configuration file](http://learninglaravel.net/img/book/chap1-pic7.png)\r\n\r\n如果你知道怎麼使用 **VI** 或 **VIM** ，可以使用下面的指令來編輯這個檔案：\r\n\r\n~~~\r\nvi ~/.homestead/Homestead.yaml\r\n~~~\r\n\r\n> **注意：** 你系統的路徑可能會不一樣，試著去找出 Homestead.yaml 在的位置。\r\n\r\n### 設定 Homestead\r\n\r\n**Homestead.yaml** 這隻檔案的架構非常簡單，總共有七個部分，接下來一一介紹。\r\n\r\n#### 第一部分 - 設定 VM\r\n\r\n~~~\r\nip: \"192.168.10.10\"\r\nmemory: 2048\r\ncpus: 1\r\nprovider: virtualbox\r\n~~~\r\n\r\n你可以看到，我們可以設定 IP 位置、記憶體、CPUs 與 VM服務提供者。這部分不是那麼重要，所以可以保留預設的情況。\r\n\r\n#### 第二與第三部分 - 設定 SSH\r\n\r\n~~~\r\nauthorize: ~/.ssh/id_rsa.pub\r\n\r\nkeys:\r\n    - ~/.ssh/id_rsa\r\n~~~\r\n\r\n我們需要產生 SSH 金鑰來給 Homestead 授權使用者與連結 VM，如果你有用過 Git，你可能已經有 SSH 金鑰了。如果你沒有，簡單的跑下面這段程式碼來產生：\r\n\r\n~~~\r\nssh-keygen -t rsa -C \"you@homestead\"\r\n~~~ \r\n\r\n這個指令會自動產生你的 SSH 金鑰，並放到 **~/.ssh** 資料夾中，你不需要再做任何事。 \r\n\r\n#### 第四部分 - 設定共享資料夾\r\n\r\n使用 **folders** 來具體說明我們要共享哪個資料夾給我們的 Homestead 環境。只要我們新增、編輯、更改任何文件在我們的本機端，在 Homestead VM 的檔案即會自動更新。\r\n\r\n~~~\r\nfolders:\r\n    - map: ~/Code\r\n      to: /home/vagrant/Code\r\n~~~\r\n\r\n預設下，你可以看到目前是設定成 **~/Code** 資料夾，而那個位置則是用來放本機端所有的檔案、腳本。如果你想要把你的程式碼放在別的地方，你可以自行修改成你想要的位置。\r\n\r\n而 **/home/vagrant/Code** 則是在 VM 裡面放程式碼的資料夾。通常，我們不需要更動它。\r\n\r\n#### 第五部分 - 設置網域（domain）\r\n\r\n~~~\r\nsites:\r\n    - map: homestead.app\r\n      to: /home/vagrant/Code/Laravel/public\r\n~~~\r\n\r\n這個部分可以讓我們將網域指到我們在VM裡面的資料夾，舉例來說，我們可以將 **homestead.app** 指到在我們的 Laravel 專案裡的 public 資料夾，然後我們就可以簡單的進入我們的 Laravel 應用程式，透過這個網址：\"http://homestead.app\"。\r\n\r\n記住，每當你要新增任何網域，你必須在本機端上修改 **hosts** 檔案，才可以使請求打到我們的 Homestead 環境。\r\n\r\n在 Linux 或 Mac的系統上，你可以在 **etc/hosts** 或 **/private/etc/hosts** 資料夾找到 **hosts** 檔案，你可以輸入下面的指令來修改 host 檔案：\r\n\r\n~~~\r\nsudo open /etc/hosts\r\n~~~\r\n\r\n如果你知道怎麼使用 **VI** 或 **VIM**，輸入下面的指令來修改它：\r\n\r\n~~~\r\nsudo vim /etc/hosts\r\n~~~\r\n\r\n在 Windows 裡，你可以在 **C:\\Windows\\System32\\drivers\\etc\\hosts** 找到 **hosts** 檔案。\r\n\r\n打開檔案後，你需要將下面這行文字，加在所有文字的最後面。\r\n\r\n~~~\r\n192.168.10.10  homestead.app\r\n~~~\r\n\r\n成功！ 當我們運行 Homestead 後，就可以透過這個網址進入網站。\r\n\r\n~~~\r\nhttp://homestead.app\r\n~~~\r\n\r\n> 請記住你可以依你所需更改網址（homestead.app）。\r\n\r\n預設下，藉由 HTTP 通過 port 8000 與 HTTPS 通過 port 4300，即可以進入所有網站。\r\n\r\n#### 第六部分 - 設定資料庫\r\n\r\n~~~\r\ndatabases:\r\n    - homestead\r\n~~~\r\n\r\n這是在 VM 裡面的資料庫名稱。通常，我們會保留預設。\r\n\r\n#### 第七部分 - 新增自定義變數\r\n\r\n~~~\r\nvariables:\r\n    - key: APP_ENV\r\n      value: local\r\n~~~\r\n\r\n如果我們想要新增一些自定義變數在我們的 VM 上，我們可以新增在這裡。但這不太重要，我們移往比較有趣的部分。\r\n\r\n### 運行 Homestead\r\n\r\n一旦我們修改完 **Homestead.yaml** 檔案， **cd** 到 **Homestead** 資料夾，運行下面這段指令來啟動我們的虛擬機。\r\n\r\n~~~\r\nvagrant up\r\n~~~\r\n\r\n這會等大概數分鐘...\r\n\r\n如果你看到這個錯誤：\r\n\r\n![Homestead error](http://learninglaravel.net/img/book/chap1-pic8.png)\r\n\r\n這表示你並沒有 **Code** 資料夾在你的本機端，你可以創建一個，或改變連結到其他你想要的資料夾。\r\n\r\n執行下面著個指令來創建 **Code** 資料夾：\r\n\r\n    sudo mkdir ~/Code\r\n\r\n> **請注意**：如果你在安裝 Laravel 有任何錯誤，試著輸入下面的指令設定正確的權限給 Code 資料夾：\r\n\r\n    chmod -R 0777 ~/Code\r\n\r\n如果每件事都成功，你會看到：\r\n\r\n![Booting Homestead](http://learninglaravel.net/img/book/chap1-pic9.png)\r\n\r\n現在你可以輸入下面指令進入到你的 VM：\r\n\r\n    vagrant ssh\r\n\r\n![SSH Homestead](http://learninglaravel.net/img/book/chap1-pic10.png)\r\n\r\n輸入 **ls** 指令來確認是否成功：\r\n\r\n![Run ls command](http://learninglaravel.net/img/book/chap1-pic14.png)\r\n\r\n如果你在這看到 **Code** 資料夾，就代表你成功安裝 Homestead 了！\r\n\r\n太棒了！讓我們開始安裝 Laravel !\r\n\r\n### 安裝 Laravel\r\n\r\n當你安裝完 Homestead，創建一個新的 Laravel 應用程式非常簡單！\r\n\r\n就如我剛剛所說，**Code** 資料夾就是我們用來放我們的 Laravel 應用程式的地方，讓我們去裡面吧！\r\n\r\n    cd Code\r\n\r\n你會發現這個資料夾是空的，而這裡有兩種方法來安裝 Laravel。\r\n\r\n#### 安裝 Laravel 透過 Laravel Installer(安裝包)\r\n\r\n這是推薦的方法。是比較新比較快的方法，你可以使用這個方法來創建 Laravel 應用程式。\r\n\r\n首先，我們需要使用 **Composer** 來下載 **Laravel installer**。\r\n\r\n    composer global require \"laravel/installer=~1.1\"\r\n\r\n這個指令是用來下載 **Laravel 5.0**，如果你要使用最新的版本，輸入下面的：\r\n\r\n    composer global require \"laravel/installer\"\r\n\r\n> **注意：** 推薦使用 Laravel 5.0 來學習基礎的 Laravel 框架，你之後可以更新到更高的版本。但是你也可以使用最新的版本，本書會經常地更新來支持新版本。\r\n \r\n![Use Composer to install Laravel installer](http://learninglaravel.net/img/book/chap1-pic15.png)\r\n\r\n一旦下載完，你可以輸入下面的指令來創建一個新 Laravel 專案：\r\n\r\n    laravel new nameOfYourSite\r\n    \r\n你可以把 **nameOfYourSite** 改成任何你想要的，但記得要修改在 **Homestead.yaml** 的 **sites section** 以吻合你網站的名字，\r\n\r\n舉例來說，在 **Homestead.yaml** 裡。我們具體描述了我們應用程式的名稱是 **Laravel**\r\n\r\n    sites:\r\n        - map: homestead.app\r\n          to: /home/vagrant/Code/Laravel/public\r\n          \r\n我們還需要執行這個指令來創建 **Laravel** 網站  \r\n\r\n    laravel new Laravel\r\n\r\n你會看到這個\r\n\r\n![Create a new Laravel app](http://learninglaravel.net/img/book/chap1-pic16.png)\r\n\r\n打開你的瀏覽器，進去 **http://homestead.app**\r\n\r\n![Laravel is ready!](http://learninglaravel.net/img/book/chap1-pic17.png)\r\n\r\n恭喜！你成功安裝 Laravel！是時候創建有趣的東西了！\r\n\r\n#### 安裝 Laravel 透過 Composer Create-Project\r\n\r\n如果你不喜歡使用 Laravel Installer，或是你在中途出了什麼問題，也可以使用**Composer Create-Project** 來創建新的 Laravel 應用程式。\r\n\r\n    composer create-project laravel/laravel nameOfYourSite \"~5.0.0\"\r\n\r\n這個指令是用來下載 **Laravel 5.0**，如果你想要用最新的版本，請輸入：\r\n\r\n    composer create-project laravel/laravel nameOfYourSite\r\n\r\n你可以把 **nameOfYourSite** 改成任何你想要的，但記得要修改在 **Homestead.yaml** 的 **sites section** 以吻合你網站的名字，\r\n\r\n舉例來說，在 **Homestead.yaml** 裡。我們具體描述了我們應用程式的名稱是 **Laravel**\r\n\r\n    sites:\r\n        - map: homestead.app\r\n          to: /home/vagrant/Code/Laravel/public\r\n\r\n我們還需要執行這個指令來創建 **Laravel** 網站  \r\n\r\n    composer create-project laravel/laravel Laravel\r\n\r\n或是，我們可以創建一個新的 **Laravel** 資料夾，**cd** 到那裏，然後在那裡創建我們的Laravel 應用程式：\r\n\r\n    mkdir Laravel\r\n    cd Laravel\r\n    composer create-project laravel/laravel --prefer-dist\r\n\r\n你會看到這個\r\n\r\n![Create a new Laravel app](http://learninglaravel.net/img/book/chap1-pic18.png)\r\n\r\n打開你的瀏覽器，進去 **http://homestead.app**\r\n\r\n![Laravel is ready!](http://learninglaravel.net/img/book/chap1-pic17.png)\r\n\r\n**請注意** 如果你不能進入這個網站，試著加 port 在URL後面： http://homestead.app:8000。\r\n\r\n恭喜！你成功安裝 Laravel！是時候創建有趣的東西了！\r\n\r\n> *重要： 本章節目前是穩定的版本。讓我們知道你喜歡什麼，或者可能不喜歡的地方。我們將定期更新所有章節，以修復漏洞和錯誤。*\r\n\r\n# 章節二：創建我們的第一個網站 \r\n\r\n現在，我們知道如何安裝 Laravel，就跟隨我們的腳步來開始第一個 Laravel 網站。在這章節，你會學到 Laravel 架構、路由（routes）、控制器（Controllers）、Balde套版、Artisan 指令、Elixir與在架 Laravel 應用程式時會用到的許多簡單基礎。\r\n\r\n## 探索 Laravel 架構\r\n\r\n假設你把 Laravel 安裝到 **~/Code/Laravel**。讓我們到那裡後並打開 **Laravel** 資料夾。\r\n\r\n![Laravel structure](http://learninglaravel.net/img/book/chap2-pic1.png)\r\n\r\n你需要非常清楚 Laravel，才能使用它來建立應用程式。\r\n\r\nLaravel 使用 **MVC (Model View Controller)** 模式，所以如果你已經知道如何使用 MVC，你會非常容易上手。如果你不知道什麼是 MVC，你很快就會知道。\r\n\r\n就如你所見，每一次你進到 Laravel 應用程式，你會看到**九個資料夾**。\r\n\r\n1. app\r\n2. bootstrap\r\n3. config\r\n4. database\r\n5. public\r\n6. resources\r\n7. storage\r\n8. tests\r\n9. vendor\r\n\r\n\r\n我不打算告訴你所有的資料夾用途，因為那非常無聊。\r\n\r\n但相信我。\r\n\r\n無論如何，我們都得快速瀏覽過它們，並知道如何去使用。\r\n\r\n#### App\r\n\r\n這個資料夾放所有我們應用程式的邏輯，我們會放我們的控制器（Controllers）、服務（Services）、過濾（Filters）、指令（Commands）與其他客製化的類別（Class）。\r\n\r\n#### Bootstrap\r\n\r\n這個資料夾裡面的東西是用來引導 Laravel，快取資料夾也在這裡面。\r\n\r\n#### Config\r\n\r\n當你要設定你的應用程式時，可以查看這裡，你可以在這設定資料庫、郵件、Session等...。\r\n\r\n#### Database\r\n\r\n如資料夾名稱所示，這個資料夾用來放我們的資料遷移（migration）與資料種子（Seeder）。\r\n\r\n#### Public\r\n\r\n這個 Public 資料夾包含應用程式的圖片、CSS、JS與其他公開的檔案。\r\n\r\n#### Resources\r\n\r\n我們應該放我們的視圖（.blade.php 檔案）、未經處理的檔案與其他本地化的檔案在這。\r\n\r\n#### Storage\r\n\r\nLaravel 使用這個資料夾來放 session、快取、樣板、紀錄等...。\r\n\r\n#### Tests\r\n\r\n這個資料夾包含測試的資料，例如 PHPUnit 檔案。\r\n\r\n#### Vendor \r\n\r\nComposer 依賴（例如：Symfony 類別、PHPUnit 類別等）都放在這裡。\r\n\r\n你可以照訪下面的官方文件來認識更多 Laravel 結構。\r\n\r\n[http://laravel.com/docs/master/structure](http://laravel.com/docs/master/structure)\r\n\r\n## 瞭解 routes.php\r\n\r\n其中一個在 Laravel 中最重要的檔案就是 **routes.php**。這個檔案可以在 **Laravel/app/Http/** 這裡找到。\r\n\r\n我們透過這檔案來指到路由。\r\n\r\n這是什麼意思？\r\n\r\n路由意思就是告訴 Laravel 去抓 URL 的請求，然後分配個別的請求，使其對應到你的希望的行為。舉例來說，當有人訪問 **homestead.app** ，也就是我們的首頁時，Laravel 會“想“：「歐，這個傢伙正要去我們的首頁，我需要展示歡迎頁面，並顯示出一些引文讓他閱讀！」\r\n\r\n我們通常設定所有的路由在 **routes.php** 檔案裡。\r\n\r\n## 改變 Laravel 首頁\r\n\r\n如果要改變 Laravel 首頁，你需要修改 **routes.php** 這隻檔案。\r\n\r\n讓我們來看有什麼在裡面。\r\n\r\n\r\n    Route::get('/', function () {\r\n        return view('welcome');\r\n    });\r\n    \r\n我們只會有一個預設的路由。\r\n\r\n這個路由告訴 Laravel 當有人使用了 **GET 請求** 到我們的 **根網址**（相當於 **/**）就會返回 **歡迎視圖**。\r\n\r\n> **注意：** 從 Laravel 5.1 開始，routes.php 已經變了。如果你看到不一樣的 routes.php 檔案，你可能會是舊的 Laravel 版本，請更新你的應用程式到版本 **5.1** 或更新。\r\n> \r\n>  routes.php （5.0版本） \r\n> \r\n> \r\n>     Route::get('/', 'WelcomeController@index');\r\n>     Route::get('home', 'HomeController@index');\r\n>     Route::controllers([\r\n>     'auth' => 'Auth\\AuthController',\r\n>     'password' => 'Auth\\PasswordController',\r\n>     ]);\r\n\r\n所以，如果你想要修改首頁，你就需要修改 **歡迎視圖**\r\n\r\n那什麼是視圖？什麼又是歡迎視圖？\r\n\r\n視圖包含由我們應用程式提供的 HTML。一個簡單的視圖會看起來就像一個簡單的 HTML 檔案：\r\n\r\n    <html>\r\n        <body>\r\n          <p> A simple view </p>\r\n        </body\r\n    </html>\r\n\r\n所有的視圖都存在 **resources/views** 資料夾裡。\r\n\r\n進去 **views** 資料夾，找到一個檔案叫做 **welcome.blade.php**，而這就是 **歡迎視圖**。\r\n\r\n打開它：\r\n\r\n    <html>\r\n        <head>\r\n            <title>Laravel</title>\r\n    \r\n            <link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n    \r\n            <style>\r\n                body {\r\n                    margin: 0;\r\n                    padding: 0;\r\n                    width: 100%;\r\n                    height: 100%;\r\n                    color: #B0BEC5;\r\n                    display: table;\r\n                    font-weight: 100;\r\n                    font-family: 'Lato';\r\n                }\r\n    \r\n                .container {\r\n                    text-align: center;\r\n                    display: table-cell;\r\n                    vertical-align: middle;\r\n                }\r\n    \r\n                .content {\r\n                    text-align: center;\r\n                    display: inline-block;\r\n                }\r\n    \r\n                .title {\r\n                    font-size: 96px;\r\n                    margin-bottom: 40px;\r\n                }\r\n    \r\n                .quote {\r\n                    font-size: 24px;\r\n                }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div class=\"container\">\r\n                <div class=\"content\">\r\n                    <div class=\"title\">Laravel 5</div>\r\n                    <div class=\"quote\">{{ Inspiring::quote() }}</div>\r\n                </div>\r\n            </div>\r\n        </body>\r\n    </html>\r\n\r\n這個歡迎視圖是用來展示首頁的，他看起來就像一個基礎的 HTML 檔案。\r\n\r\n我假設你已經知道什麼是 HTML 了，所以你應該能請楚的知道這個檔案裡的內容。\r\n\r\n如果你不知道，**w3schools** 是一個不錯的地方來學習 HTML 跟 PHP。\r\n\r\n[http://www.w3schools.com/html](http://www.w3schools.com/html)\r\n\r\n是時候來修改首頁了！\r\n\r\n我們該做什麼？\r\n\r\n那來展示我們自己的引文？\r\n\r\n修改這句：\r\n\r\n    <div class=\"quote\">{{ Inspiring::quote() }}</div>\r\n\r\n\r\n換成\r\n\r\n\r\n    <div class=\"quote\">Put your custom quote here!</div>\r\n    \r\n    \r\n儲存檔案，打該你的瀏覽器，然後進入 **homestead.app**。\r\n\r\n![Our new home page](http://learninglaravel.net/img/book/chap2-pic2.png)\r\n\r\n非常棒！我們剛剛透過修改 **welcome.blade.php** 樣板來改變了我們的首頁！\r\n\r\n事實上，我們可以在不用返回視圖的情況下，改變我們的頁面：\r\n\r\n修改第一個路由：\r\n\r\n\r\n    Route::get('/', function () {\r\n        return view('welcome');\r\n    });\r\n\r\n\r\n換成\r\n\r\n\r\n    Route::get('/', function() \r\n    {\r\n    return 'Welcome to our home page!';\r\n    });\r\n\r\n\r\n![Our new home page](http://learninglaravel.net/img/book/chap2-pic3.png)\r\n\r\n\r\n是不是很棒！\r\n\r\n我們剛剛使用了 **匿名函數（anonymous function）** 來修改我們的首頁。在 PHP 中，我們稱它為：**\"閉包（Closure）\"**。\r\n\r\n閉包是一個沒有名字的函數。\r\n\r\n我們可以在小型應用程式中使用 **閉包** 來處理 \"路由\"。但在大的應用程式中，我們使用 **控制器（Controllers）**。\r\n\r\n你可以在下面這裡找到控制器的說明文件：\r\n\r\n[http://laravel.com/docs/master/controllers](http://laravel.com/docs/master/controllers)\r\n\r\n建議你應該每次都使用控制器，因為控制器幫你簡單結構化你的程式。舉例來說，你可以統整你全部的使用者行為在 UserController （使用者控制器）裡面，所有文章的行為就放在 PostsController （文章控制器）裡面。\r\n\r\n而控制器的缺點就是，你會需要建立新的檔案給每一個控制器，而這會花一些時間。\r\n\r\n為了更瞭解什麼是 **控制器**，我們會用控制器來創造一些頁面。\r\n\r\n## 為我們的第一個網站增加更多頁面\r\n\r\n當們有了如何修改首頁的基礎，新增更多頁面會變得非常輕鬆。\r\n\r\n想像一下，我們正打算打造一個網站來介紹 Learning Laravel （這本書），而這個網站會需要三個頁面：\r\n\r\n1. 首頁。 \r\n2. 關於我們。\r\n3. 聯絡我們。\r\n\r\n因為我們有很多頁面，因此需要需要增加頁面到我們的網站，而我們應該管理我們的頁面在 **PagesController（頁面控制器）**\r\n\r\n就如你所見，我們目前還沒有 **PagesController（頁面控制器）**，因此我們要來新建一個。\r\n\r\n### 新建我們的第一個控制器\r\n\r\n這裡有兩個方法來新增一個控制器：\r\n\r\n#### 手動的新增一個控制器\r\n\r\n使用你最喜歡的程式編輯器（例如：PHPStorm、Sublime Text），創建一個新的檔案叫做 **PagesController.php**。\r\n\r\n把創建的檔案放在 **app/Http/Contorllers/** 資料夾。\r\n\r\n把 **PagesController.php** 檔案更新成下面這樣：\r\n\r\n\r\n    <?php namespace App\\Http\\Controllers;\r\n    \r\n    class PagesController extends Controller {\r\n    \r\n        public function home()\r\n        {\r\n            return view('welcome');\r\n        }\r\n    \r\n    }\r\n\r\n太棒了！你現在有了一個裡面有**首頁行為**的頁面控制器。\r\n\r\n你可以看到首頁行為告訴 Laravel **\"回傳歡迎視圖\"**：\r\n\r\n\r\n    return view('welcome');\r\n\r\n\r\n#### 使用 Artisan 創建控制器\r\n\r\n你也可以使用 **Artisan** 來自動的產生控制器，而不是使用手動的新建控制器。\r\n\r\n**Artisan** 是一個 Laravel 命令列工具，它協助我們做一些我們不喜歡手動做的事情。使用 Artisan，我們可以創造模型、視圖、控制器、資料庫遷移與其他的事情。\r\n\r\n你已經知道怎麼使用 Terminal 或 Git Bash，輸入下面的指令來創建一個控制器：\r\n\r\n    php artisan make:controller PagesController\r\n\r\n> **注意：** 使用 **vagrant ssh** 進到你的虛擬機器, 再 **cd** 到你的 Laravel 資歷夾，然後再使用這個指令.\r\n\r\n\r\n你會看到：\r\n\r\n![Our first controller](http://learninglaravel.net/img/book/chap2-pic4.png)\r\n\r\n預設情況，Laravel 會創建一個 RESTful 控制器。因此，我們的 **PagesController** 類別會有下面幾個行為：\r\n\r\n1. index\r\n2. show\r\n3. create\r\n4. store\r\n5. edit\r\n6. update\r\n7. destroy\r\n\r\n我們不需要這些，你可以直接移除他們，然後以下面的首頁行為範例來取代掉：\r\n\r\n\r\n    <?php namespace App\\Http\\Controllers;\r\n    \r\n    use App\\Http\\Requests;\r\n    use App\\Http\\Controllers\\Controller;\r\n    \r\n    use Illuminate\\Http\\Request;\r\n    \r\n    class PagesController extends Controller {\r\n    \r\n        public function home()\r\n        {\r\n            return view('welcome');\r\n        }\r\n    \r\n    }\r\n\r\n或是，你可使用下面這個指令來產出一個沒有任何預設行為的  **PageController** ：\r\n\r\n    php artisan make:controller PagesController --plain\r\n\r\n> **注意：** 從 Laravel 5.2 開始，這個 \"--plain\" 的功能已經被移除。控制器會一直都是空白的。\r\n\r\n做得好！你現在有個裡面有首頁行為的頁面控制器。\r\n\r\n你可以看到首頁行為告訴 Laravel 去**『回傳歡迎視圖』**：\r\n\r\n\r\n    return view('welcome');\r\n\r\n\r\n### 使用我們第一個控制器\r\n\r\n讚！當你使用 **PagesController**，下一件要做的事就是修改我們的 **路由**！\r\n\r\n打開 **routes.php** 檔案，修改預設的路由成：\r\n\r\n\r\n    Route::get('/', 'PagesController@home');\r\n\r\n這個路由告訴 Laravel 去執行首頁行為（在 頁面控制器 裡面），當有人做一個 GET 請求到我們的根目錄（也就是 /）。\r\n\r\n![使用我們的第一個控制器來展現首頁](http://learninglaravel.net/img/book/chap2-pic2.png)\r\n\r\n做得好！你剛剛用了自己的控制器來展現了首頁！\r\n \r\n### 創建其他頁面\r\n\r\n我們有了頁面控制器的類別後，新增其他頁面其實並不困難。\r\n\r\n> 你能不能試著自己添加 關於我們 和 聯絡我們 的頁面？ \r\n\r\n修改 **routes.php** 檔案。加上下面這兩行：\r\n\r\n    Route::get('/about', 'PagesController@about');\r\n    Route::get('/contact', 'PagesController@contact');\r\n\r\n打開 **PagesController** ，新增：\r\n\r\n    public function about()\r\n    {\r\n        return view('about');\r\n    }\r\n    \r\n    public function contact()\r\n    {\r\n        return view('contact');\r\n    }\r\n\r\n下一步，你需要創建 **關於我們 視圖** 跟 **聯絡我們 視圖**。創建兩個檔案在 **resources/views** 目錄下，然後取名叫 **about.blade.php** 與 **contact.blade.php**。\r\n\r\n最後，新增下面的內容（從 **歡迎視圖** 中複製過來）到各別的檔案裡：\r\n\r\n**about.blade.php**\r\n\r\n\r\n    <html>\r\n    \t<head>\r\n    \t\t<title>About Page</title>\r\n    \t\t\r\n    \t\t<link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n    \r\n    \t\t<style>\r\n    \t\t\tbody {\r\n    \t\t\t\tmargin: 0;\r\n    \t\t\t\tpadding: 0;\r\n    \t\t\t\twidth: 100%;\r\n    \t\t\t\theight: 100%;\r\n    \t\t\t\tcolor: #B0BEC5;\r\n    \t\t\t\tdisplay: table;\r\n    \t\t\t\tfont-weight: 100;\r\n    \t\t\t\tfont-family: 'Lato';\r\n    \t\t\t}\r\n    \r\n    \t\t\t.container {\r\n    \t\t\t\ttext-align: center;\r\n    \t\t\t\tdisplay: table-cell;\r\n    \t\t\t\tvertical-align: middle;\r\n    \t\t\t}\r\n    \r\n    \t\t\t.content {\r\n    \t\t\t\ttext-align: center;\r\n    \t\t\t\tdisplay: inline-block;\r\n    \t\t\t}\r\n    \r\n    \t\t\t.title {\r\n    \t\t\t\tfont-size: 96px;\r\n    \t\t\t\tmargin-bottom: 40px;\r\n    \t\t\t}\r\n    \r\n    \t\t\t.quote {\r\n    \t\t\t\tfont-size: 24px;\r\n    \t\t\t}\r\n    \t\t</style>\r\n    \t</head>\r\n    \t<body>\r\n    \t\t<div class=\"container\">\r\n    \t\t\t<div class=\"content\">\r\n    \t\t\t\t<div class=\"title\">About Page</div>\r\n                    <div class=\"quote\">Our about page!</div>\r\n                </div>\r\n    \t\t</div>\r\n    \t</body>\r\n    </html>\r\n\r\n**contact.blade.php**\r\n\r\n\r\n    <html>\r\n    \t<head>\r\n    \t\t<title>Contact Page</title>\r\n    \t\t\r\n    \t\t<link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n    \r\n    \t\t<style>\r\n    \t\t\tbody {\r\n    \t\t\t\tmargin: 0;\r\n    \t\t\t\tpadding: 0;\r\n    \t\t\t\twidth: 100%;\r\n    \t\t\t\theight: 100%;\r\n    \t\t\t\tcolor: #B0BEC5;\r\n    \t\t\t\tdisplay: table;\r\n    \t\t\t\tfont-weight: 100;\r\n    \t\t\t\tfont-family: 'Lato';\r\n    \t\t\t}\r\n    \r\n    \t\t\t.container {\r\n    \t\t\t\ttext-align: center;\r\n    \t\t\t\tdisplay: table-cell;\r\n    \t\t\t\tvertical-align: middle;\r\n    \t\t\t}\r\n    \r\n    \t\t\t.content {\r\n    \t\t\t\ttext-align: center;\r\n    \t\t\t\tdisplay: inline-block;\r\n    \t\t\t}\r\n    \r\n    \t\t\t.title {\r\n    \t\t\t\tfont-size: 96px;\r\n    \t\t\t\tmargin-bottom: 40px;\r\n    \t\t\t}\r\n    \r\n    \t\t\t.quote {\r\n    \t\t\t\tfont-size: 24px;\r\n    \t\t\t}\r\n    \t\t</style>\r\n    \t</head>\r\n    \t<body>\r\n        <div class=\"container\">\r\n            <div class=\"content\">\r\n                <div class=\"title\">Contact Page</div>\r\n                <div class=\"quote\">Our contact page!</div>\r\n            </div>\r\n        </div>\r\n    \t</body>\r\n    </html>\r\n\r\n\r\n儲存修改的檔案後，分別在瀏覽器的連結輸入 **homestead.app/about** 和 **homestead.app/contact**：\r\n\r\n![About page](http://learninglaravel.net/img/book/chap2-pic5.png)\r\n\r\n![Contact page](http://learninglaravel.net/img/book/chap2-pic6.png)\r\n\r\n太好了！你只用了幾行的程式，就成功創建了「關於我們」、「聯絡我們」這兩頁！\r\n\r\n現在，讓我們來為我們的首頁創建一個 **首頁（home）視圖**，然後再修改 **PagesController** 來使用它：\r\n\r\n> *注意： 如果你看到預設的 home.blade.php 檔案，可以直接把它刪掉，然後創建一個新的檔案。\r\n\r\n首頁:\r\n\r\n    <html>\r\n    <head>\r\n        <title>Home Page</title>\r\n    \r\n        <link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n    \r\n        <style>\r\n            body {\r\n                margin: 0;\r\n                padding: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                color: #B0BEC5;\r\n                display: table;\r\n                font-weight: 100;\r\n                font-family: 'Lato';\r\n            }\r\n    \r\n            .container {\r\n                text-align: center;\r\n                display: table-cell;\r\n                vertical-align: middle;\r\n            }\r\n    \r\n            .content {\r\n                text-align: center;\r\n                display: inline-block;\r\n            }\r\n    \r\n            .title {\r\n                font-size: 96px;\r\n                margin-bottom: 40px;\r\n            }\r\n    \r\n            .quote {\r\n                font-size: 24px;\r\n            }\r\n        </style>\r\n    </head>\r\n    <body>\r\n    <div class=\"container\">\r\n        <div class=\"content\">\r\n            <div class=\"title\">Home Page</div>\r\n            <div class=\"quote\">Our Home page!</div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n    </html>\r\n\r\n\r\nPagesControllers\r\n\r\n    public function home()\r\n    {\r\n        return view('home');\r\n    }\r\n\r\n\r\n## 整合 Twitter Bootstrap\r\n\r\n現今，最有名的前端框架是 **Twitter Bootstrap**。他是免費、開源的，而且還有龐大的活躍社群。我所有的專案都是使用 Bootstrap。\r\n\r\n使用 Twitter Bootstrap，我們可以快速的開發響應式、支援手機的網路應用程式。上百萬個漂亮且有名的網站都是用 Bootstrap 建立的。\r\n\r\n在這個章節，我們會學到如何整合 Twitter Bootstrap 到我們的 Laravel 應用程式裡面。\r\n\r\n你可以在這取得 Bootstrap，並閱讀他們官方的文件：\r\n\r\n[http://getbootstrap.com](http://getbootstrap.com)\r\n\r\n有非常多方法可以來整合 Twitter Bootstrap。你可以使用 Bootstrap CDN、Bower、npm...等方法來安裝\r\n\r\n我會示範三種最常見的方法：\r\n\r\n1. 使用 Bootstrap CDN\r\n\r\n2. 使用預編譯的 Bootstrap 檔案\r\n\r\n3. 使用 Bootstrap 原始碼 (Less)\r\n\r\n### 使用 Bootstrap CDN\r\n\r\n整合 Twitter Bootstrap 最快的方法是使用 CDN。\r\n\r\n打開 **home.blade.php**，把下面這些連結放在 **head** 標籤裡面。\r\n\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\">\r\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css\">\r\n\r\n    <script src=\"//code.jquery.com/jquery-1.11.3.min.js\"></script>\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>\r\n\r\n完成！你現在已經完全整合 Twitter Bootstrap 到你的網站！\r\n\r\n你可能有注意到我們之前加了一些 CSS 樣式和 Lato 字體到我們的 **home.blade.php** 檔案。 **移除** 這些：\r\n\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            color: #B0BEC5;\r\n            display: table;\r\n            font-weight: 100;\r\n            font-family: 'Lato';\r\n        }\r\n    \r\n        .container {\r\n            text-align: center;\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n    \r\n        .content {\r\n            text-align: center;\r\n            display: inline-block;\r\n        }\r\n    \r\n        .title {\r\n            font-size: 96px;\r\n            margin-bottom: 40px;\r\n        }\r\n    \r\n        .quote {\r\n            font-size: 24px;\r\n        }\r\n    </style>\r\n\r\n還有\r\n\r\n    <link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n\r\n\r\n這是我們新的 **home.blade.php**：\r\n\r\n\r\n    <html>\r\n    <head>\r\n        <title>Home Page</title>\r\n    \r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\">\r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css\">\r\n\r\n        <script src=\"//code.jquery.com/jquery-1.11.3.min.js\"></script>\r\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>\r\n    \r\n    </head>\r\n    <body>\r\n    \r\n    <div class=\"container\">\r\n        <div class=\"content\">\r\n            <div class=\"title\">Home Page</div>\r\n            <div class=\"quote\">Our Home page!</div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n    </html>\r\n\r\n> 注意：bootstrap-theme.min.css 這隻檔案是不必要的。\r\n\r\n### 使用欲先編譯的 Bootstrap 檔案\r\n\r\nTwitter Bootstrap 是用 Less 寫的，一個CSS的預處理器。\r\n\r\nLess 允許我們使用變數、混合、函數與其他技術去加強 CSS。你可以在這了解到更多Less的知識：\r\n\r\n[http://lesscss.org](http://lesscss.org)\r\n\r\n不幸的是，瀏覽器並不認識 Less。你必須使用 **Less 編譯器** 來 **編譯** 所有 Less 檔案產生 CSS 檔案。當然，前提是你必須學會 Less。\r\n\r\n幸運的是，Bootstrap 有提供編譯過的 CSS、JS 和字體給我們。我可以下載並使用他們，避免處理 Less 的檔案：\r\n\r\n[http://getbootstrap.com/getting-started](http://getbootstrap.com/getting-started)\r\n\r\n點擊 **Download Bootstrap** 來下載最新的編譯過的 Bootstrap 檔案。\r\n\r\n解壓縮下載的 .zip 檔案，會看到三個資料夾：\r\n\r\n1. css\r\n2. js\r\n3. fonts\r\n\r\n把他們全部放在你應用程式的 **public** 資料夾。（**~/Code/Laravel/public**）。\r\n\r\n> 注意：預設情況下，Laravel 有建立 **css** 和 **fonts** 資料夾給我們。在 **fonts** 資料夾還包含所有 **glyphicons** 的字體。\r\n\r\n當你造訪你的 public 資料夾，他會看起還像下面這張圖：\r\n\r\n![Bootstrap navbar](http://learninglaravel.net/img/book/chap2-pic8.png)\r\n\r\n為了要讓 Twitter Bootstrap 框架幫我們首頁添加樣式，打開 **home.blade.php** 檔案，然後再 **head** 標籤裡放下面這些連結：\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{!! asset('css/bootstrap.min.css') !!}\" >\r\n    <link rel=\"stylesheet\" href=\"{!! asset('css/bootstrap-theme.min.css') !!}\">\r\n    <script src=\"{!! asset('js/bootstrap.min.js') !!}\"></script>\r\n\r\nTwitter Bootstrap 需要 **jQuery** 來正確地運行，你可以在這下載 **jQuery**：\r\n\r\n[https://jquery.com/download](https://jquery.com/download)\r\n\r\n把 jQuery 檔案同樣放到 **public**，然後使用下面的程式來引用他：\r\n\r\n    <script src=\"{!! asset('js/jquery-1.11.3.min.js') !!}\"></script>\r\n\r\n或你可以直接使用 **jQuery CDN** 來避免下載 jQuery 檔案：\r\n\r\n    <script src=\"//code.jquery.com/jquery-1.11.3.min.js\"></script>\r\n\r\n> 注意：你的 jQuery 版本可能會不一樣。\r\n\r\n完整的程式：\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{!! asset('css/bootstrap.min.css') !!}\" >\r\n    <link rel=\"stylesheet\" href=\"{!! asset('css/bootstrap-theme.min.css') !!}\">\r\n    <script src=\"{!! asset('js/jquery-1.11.3.min.js') !!}\"></script>\r\n    <script src=\"{!! asset('js/bootstrap.min.js') !!}\"></script>\r\n\r\n完成！你已經完全的整合 **Twitter Bootstrap** 到我們的網站！\r\n\r\n我們使用了 **asset** 函式來連結 CSS 跟 JS 到我們的應用程式。你也可以使用 **asset** 函式來連結到圖片、字體與其他公開檔案。如果你不想要用 asset 函式，你可以使用相對路徑：\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/bootstrap.min.css\" >\r\n    <link rel=\"stylesheet\" href=\"/css/bootstrap-theme.min.css\">\r\n\r\n    <script src=\"/js/jquery-1.11.3.min.js\"></script>\r\n    <script src=\"/js/bootstrap.min.js\"></script>\r\n\r\n\r\n你可能有注意到我們之前加了一些 CSS 樣式和 Lato 字體到我們的 **home.blade.php** 檔案。 **移除** 這些：\r\n\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            color: #B0BEC5;\r\n            display: table;\r\n            font-weight: 100;\r\n            font-family: 'Lato';\r\n        }\r\n\r\n        .container {\r\n            text-align: center;\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        .content {\r\n            text-align: center;\r\n            display: inline-block;\r\n        }\r\n\r\n        .title {\r\n            font-size: 96px;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .quote {\r\n            font-size: 24px;\r\n        }\r\n    </style>\r\n\r\n還有這個\r\n\r\n    <link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n\r\n這是我們新的 **home.blade.php** 檔案：\r\n\r\n    <html>\r\n    <head>\r\n        <title>Home Page</title>\r\n    \r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{!! asset('css/bootstrap.min.css') !!}\" >\r\n        <link rel=\"stylesheet\" href=\"{!! asset('css/bootstrap-theme.min.css') !!}\">\r\n        <script src=\"{!! asset('js/bootstrap.min.js') !!}\"></script>\r\n    \r\n    </head>\r\n    <body>\r\n    \r\n    <div class=\"container\">\r\n        <div class=\"content\">\r\n            <div class=\"title\">Home Page</div>\r\n            <div class=\"quote\">Our Home page!</div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n    </html>\r\n\r\n> 注意：bootstrap-theme.min.css 這隻檔案是不必要的。\r\n\r\n### 使用 Bootstrap 原始碼 (Less)\r\n\r\n好消息是，Laravel 5 有正式支援 **Less**。 Less 檔案放在 **resources/assets/less**。\r\n\r\n首先，我們需要下載 Twitter Bootstrap 原始碼：\r\n\r\n[http://getbootstrap.com/getting-started](http://getbootstrap.com/getting-started)\r\n\r\n點 **Download source** 來下載最新的 Bootstrap 原始碼。\r\n\r\n解壓縮下載的 .zip 檔案，重新命名 **less 資料夾** 成 **bootstrap**。然後把 bootstrap 資料夾放在 **resources/assets/less/** 裡面。\r\n\r\n打開 **app.less** 檔案，使用下面這行程式來引入 **bootstrap.less** ：\r\n\r\n\r\n    @import \"bootstrap/bootstrap\";\r\n\r\n\r\n> 注意：自從 Laravel 5.1， Laravel 移除掉 Bootstrap 的原始碼。\r\n\r\n在 Laravel 5，我們使用 **Elixir** 來自動編譯 Less 檔案到 **app.css** 裡面。\r\n\r\n為了要讓 Twitter Bootstrap 框架幫我們首頁添加樣式，打開 **home.blade.php** 檔案，然後再 **head** 標籤裡放下面這些連結：\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{!! asset('app.css') !!}\" >\r\n\r\nTwitter Bootstrap 需要 jQuery 和 Twitter Bootstrap JS 來正確地運行，你需要整合 Bootstrap JS 和 jQuery：\r\n\r\n    <script src=\"//code.jquery.com/jquery-1.11.3.min.js\"></script>\r\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>\r\n\r\n或者，你可以下載 js 檔案，然後放到 **js** 資料夾裡面，然後再本機端引用他：\r\n\r\n    <script src=\"{!! asset('js/jquery-1.11.3.min.js') !!}\"></script>\r\n    <script src=\"{!! asset('js/bootstrap.min.js') !!}\"></script>\r\n\r\n完整的程式：\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{!! asset('app.css') !!}\" >\r\n    <script src=\"{!! asset('js/jquery-1.11.3.min.js') !!}\"></script>\r\n    <script src=\"{!! asset('js/bootstrap.min.js') !!}\"></script>\r\n\r\n完成！你已經完全的整合 **Twitter Bootstrap** 到你自己的網站！\r\n\r\n我們使用了 **asset** 函式來連結 CSS 跟 JS 到我們的應用程式。你也可以使用 **asset** 函式來連結到圖片、字體與其他公開檔案。如果你不想要用 asset 函式，你可以使用 **相對路徑** ：\r\n\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/app.css\" >\r\n    <script src=\"/js/bootstrap.min.js\"></script>\r\n\r\n你可能有注意到我們之前加了一些 **CSS 樣式** 和 **Lato 字體** 到我們的 **home.blade.php** 檔案。 **移除** 這些：\r\n\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            color: #B0BEC5;\r\n            display: table;\r\n            font-weight: 100;\r\n            font-family: 'Lato';\r\n        }\r\n\r\n        .container {\r\n            text-align: center;\r\n            display: table-cell;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        .content {\r\n            text-align: center;\r\n            display: inline-block;\r\n        }\r\n\r\n        .title {\r\n            font-size: 96px;\r\n            margin-bottom: 40px;\r\n        }\r\n\r\n        .quote {\r\n            font-size: 24px;\r\n        }\r\n    </style>\r\n\r\n還有\r\n\r\n    <link href='//fonts.googleapis.com/css?family=Lato:100' rel='stylesheet' type='text/css'>\r\n\r\n這是我們新的 **home.blade.php**：\r\n\r\n    <html>\r\n    <head>\r\n        <title>Home Page</title>\r\n    \r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{!! asset('css/app.css') !!}\" >\r\n        <script src=\"{!! asset('js/bootstrap.min.js') !!}\"></script>\r\n    \r\n    </head>\r\n    <body>\r\n    \r\n    <div class=\"container\">\r\n        <div class=\"content\">\r\n            <div class=\"title\">Home Page</div>\r\n            <div class=\"quote\">Our Home page!</div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n    </html>\r\n啊，我有提到 **Elixir**，那是什麼？\r\n\r\n#### 介紹 Elixir\r\n\r\n其中一個厲害的 Laravel 5 新特色就是 **Elixir**。我們可以使用 Elixir 來編譯 Less 檔案、Coffee Scripts 或自動化其他需要操作的事情。\r\n\r\n[Elixir official documentation](http://laravel.com/docs/5.0/elixir)\r\n\r\n簡單來說，Elixir 是一個 Gulp 套件。如果你之前不知道 Gulp，你可以在下面這裡找到許多資訊：\r\n\r\n[http://gulpjs.com](http://gulpjs.com)\r\n\r\nGulp 是一個以 **Node.js** 為底的基礎任務執行器，代表如果你要使用 Elixir，你必須要先安裝 Gulp 和 Node.js。\r\n\r\n幸運的， Homestead 有把 Gulp 跟 Node.js 都預設裝好，我們可以立即使用 Gulp。如果你不想要使用 Homestead，你需要安裝 Node.js 和 Gulp。如果要安裝 Node.js，請到：\r\n\r\n[https://nodejs.org](https://nodejs.org)\r\n\r\n跟隨著網站上面的教學，你可以簡單的安裝好 Node.js。然後你就可以使用 **npm** 指令來安裝 gulp：\r\n\r\n    npm install -g gulp\r\n\r\n\r\n你可以透過運行下面的指令來檢查 Gulp 是否已經安裝：\r\n\r\n    gulp -v\r\n\r\n如果 Gulp 已經安裝，你會看到類似下面這樣的訊息：\r\n\r\n    [14:09:33] CLI version 3.8.11\r\n    [14:09:33] Local version 3.8.11\r\n\r\n下一個指令是來安裝 Elixir。Laravel 5 有包含了一個檔案叫做 **package.json**。你可以使用這個檔案來安裝 Node 的模組。\r\n打開這個檔案，你會看到：\r\n\r\n    {\r\n      \"private\": true,\r\n      \"devDependencies\": {\r\n        \"gulp\": \"^3.8.8\",\r\n        \"laravel-elixir\": \"^1.0.0\"\r\n      }\r\n    }\r\n\r\n你在這裡有看到 **laravel-elixir** 嗎？\r\n\r\n好！跳轉到我們應用程式的根目錄（~/Code/Laravel），然後運行下面這個指令來安裝 Elixir：\r\n\r\n    npm install\r\n\r\n![Installing Elixir](http://learninglaravel.net/img/book/chap2-pic9.png)\r\n\r\n這會需要一些時間來下載，需要有點耐心。\r\n\r\n一但完成，在你的應用程式會出現一個新資料夾叫做 **node_modules**。你可以在裡面找到 Gulp、Elixir 和其他 Node.js 軟體包。\r\n\r\n#### 運行第一個 Elixir 任務\r\n\r\n你可以寫 Gulp 的任務（或 Elixir 任務）在 **gulpfile.js** 裡面。舉例來說，你會在 **gulpfile.js** 裡面找到編譯 app.less 檔案成 app.css 的 Gulp 任務：\r\n\r\n    elixir(function(mix) {\r\n        mix.less('app.less');\r\n    });\r\n\r\n閱讀完官方的 Elixir 文件後，你可以自由的新增更多任務：\r\n\r\n[http://laravel.com/docs/master/elixir](http://laravel.com/docs/master/elixir)\r\n\r\n執行下面這個命令，來執行你的 Elixir 任務：\r\n\r\n    gulp\r\n\r\n\r\n![Executing Elixir task](http://learninglaravel.net/img/book/chap2-pic10.png)\r\n\r\n藉由執行這個任務，Laravel 會自動的編譯 app.less 然後把結果存到 **app.css**。這個檔案，你可以在 **public/css** 資料夾中找到。\r\n\r\n## 新增 Twitter Bootstrap 元件\r\n\r\n讚！現在你可以新增 **Twitter Bootstrap 元件** 到你的網站了。\r\n\r\n有非常多可重複使用的 Bootstrap 元件來建立導航列、標籤、下拉式選單、面板...等。你可以在這看到完整的元件清單：\r\n\r\n[http://getbootstrap.com/components](http://getbootstrap.com/components)\r\n\r\n要使用這些元件，你可以複製範例程式，然後在你的應用程式中貼上他們。舉例來說，我們可以透過新增下面程式到 **home.blade.php**，來加 Twitter Bootstrap 導航列到我們的應用程式裡面：\r\n\r\n    <nav class=\"navbar navbar-default\">\r\n      <div class=\"container-fluid\">\r\n        <!-- Brand and toggle get grouped for better mobile display -->\r\n        <div class=\"navbar-header\">\r\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\r\n            <span class=\"sr-only\">Toggle navigation</span>\r\n            <span class=\"icon-bar\"></span>\r\n            <span class=\"icon-bar\"></span>\r\n            <span class=\"icon-bar\"></span>\r\n          </button>\r\n          <a class=\"navbar-brand\" href=\"#\">Brand</a>\r\n        </div>\r\n    \r\n        <!-- Collect the nav links, forms, and other content for toggling -->\r\n        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n          <ul class=\"nav navbar-nav\">\r\n            <li class=\"active\"><a href=\"#\">Link <span class=\"sr-only\">(current)</span></a></li>\r\n            <li><a href=\"#\">Link</a></li>\r\n            <li class=\"dropdown\">\r\n              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\r\n              <ul class=\"dropdown-menu\" role=\"menu\">\r\n                <li><a href=\"#\">Action</a></li>\r\n                <li><a href=\"#\">Another action</a></li>\r\n                <li><a href=\"#\">Something else here</a></li>\r\n                <li class=\"divider\"></li>\r\n                <li><a href=\"#\">Separated link</a></li>\r\n                <li class=\"divider\"></li>\r\n                <li><a href=\"#\">One more separated link</a></li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n          <form class=\"navbar-form navbar-left\" role=\"search\">\r\n            <div class=\"form-group\">\r\n              <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\r\n            </div>\r\n            <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n          </form>\r\n          <ul class=\"nav navbar-nav navbar-right\">\r\n            <li><a href=\"#\">Link</a></li>\r\n            <li class=\"dropdown\">\r\n              <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\r\n              <ul class=\"dropdown-menu\" role=\"menu\">\r\n                <li><a href=\"#\">Action</a></li>\r\n                <li><a href=\"#\">Another action</a></li>\r\n                <li><a href=\"#\">Something else here</a></li>\r\n                <li class=\"divider\"></li>\r\n                <li><a href=\"#\">Separated link</a></li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div><!-- /.navbar-collapse -->\r\n      </div><!-- /.container-fluid -->\r\n    </nav>\r\n\r\n在加了導航列後，這是我們新的 home.blade.php：\r\n\r\n    <html>\r\n    <head>\r\n        <title>Home Page</title>\r\n    \r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\">\r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css\">\r\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>\r\n    \r\n    \r\n    </head>\r\n    <body>\r\n    \r\n    <nav class=\"navbar navbar-default\">\r\n        <div class=\"container-fluid\">\r\n            <!-- Brand and toggle get grouped for better mobile display -->\r\n            <div class=\"navbar-header\">\r\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\r\n                    <span class=\"sr-only\">Toggle navigation</span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                </button>\r\n                <a class=\"navbar-brand\" href=\"#\">Brand</a>\r\n            </div>\r\n    \r\n            <!-- Collect the nav links, forms, and other content for toggling -->\r\n            <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n                <ul class=\"nav navbar-nav\">\r\n                    <li class=\"active\"><a href=\"#\">Link <span class=\"sr-only\">(current)</span></a></li>\r\n                    <li><a href=\"#\">Link</a></li>\r\n                    <li class=\"dropdown\">\r\n                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\r\n                        <ul class=\"dropdown-menu\" role=\"menu\">\r\n                            <li><a href=\"#\">Action</a></li>\r\n                            <li><a href=\"#\">Another action</a></li>\r\n                            <li><a href=\"#\">Something else here</a></li>\r\n                            <li class=\"divider\"></li>\r\n                            <li><a href=\"#\">Separated link</a></li>\r\n                            <li class=\"divider\"></li>\r\n                            <li><a href=\"#\">One more separated link</a></li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n                <form class=\"navbar-form navbar-left\" role=\"search\">\r\n                    <div class=\"form-group\">\r\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\r\n                    </div>\r\n                    <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n                </form>\r\n                <ul class=\"nav navbar-nav navbar-right\">\r\n                    <li><a href=\"#\">Link</a></li>\r\n                    <li class=\"dropdown\">\r\n                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\r\n                        <ul class=\"dropdown-menu\" role=\"menu\">\r\n                            <li><a href=\"#\">Action</a></li>\r\n                            <li><a href=\"#\">Another action</a></li>\r\n                            <li><a href=\"#\">Something else here</a></li>\r\n                            <li class=\"divider\"></li>\r\n                            <li><a href=\"#\">Separated link</a></li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div><!-- /.navbar-collapse -->\r\n        </div><!-- /.container-fluid -->\r\n    </nav>\r\n    \r\n    <div class=\"container\">\r\n        <div class=\"content\">\r\n            <div class=\"title\">Home Page</div>\r\n            <div class=\"quote\">Our Home page!</div>\r\n        </div>\r\n    </div>\r\n    </body>\r\n    </html>\r\n    \r\n是時候重新整理我們的瀏覽器了：    \r\n\r\n![Bootstrap navbar](http://learninglaravel.net/img/book/chap2-pic7.png)\r\n\r\n## 學習 Blade 模板\r\n\r\n現在我們來學習 **Blade** 吧！\r\n\r\nBalde 是一個官方 Laravel 的模板引擎。他非常厲害，而且只有簡單的語法。我們使用 Blade 來建立我們的 Laravel 應用程式排版。\r\n\r\nBlade 試圖檔案都有 **.blade.php** 的檔案副檔名。之前的 **首頁視圖** 跟 **其它頁面視圖** 都是使用 Balde 模板。\r\n\r\n通常，我們會在 **resources/views** 資料夾裡放所有的 Blade 模板。厲害的是，我們可以使用 php 的原生程式在 Blade 視圖裡。\r\n\r\n所有的 Blade 的表達式都會以 **@** 開始。舉例來說： @section、@if、@for...等等\r\n\r\nBalde 同樣支持所有 PHP 迴圈跟判斷： **@if、@elseif、@else、@for、@foreach、 @while...等等**。舉例來說，你可以像這樣在 Blade 裡寫一個 if else 判斷：\r\n\r\n    @if ($product == 1)\r\n     {!! $product->name !!}\r\n    @else \r\n    There is no product!\r\n    @endif\r\n\r\n等同於下面這樣的 PHP 程式：\r\n\r\n    if ($product ==1) {\r\n    echo $product->name;\r\n    } else {\r\n    echo(\"There is no product!\");\r\n    }\r\n\r\n為了更理解 Blade 的特色，我們會使用 Blade 來建立我們第一個網站的排版。\r\n\r\n### 建立一個主要的排版\r\n\r\n一個典型的網路應用程式都有一個 **主要排版**。這個排版裡面由 header、footer、sidebar ...等所組成。使用一個主要排版，我們可以輕鬆的放一個元素在所有頁面上。舉例來說：我們可以使用同一個 header、footer 在所有的頁面裡。他幫助我們使我們的程式更乾淨，並省下更多時間。\r\n\r\n要開始使用，我們會先建立一個主要的排版叫做 **master.blade.php**\r\n\r\n    <html>\r\n    <head>\r\n        <title> @yield('title') </title>\r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css\">\r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap-theme.min.css\">\r\n\r\n        <script src=\"//code.jquery.com/jquery-1.11.3.min.js\"></script>\r\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js\"></script>\r\n    </head>\r\n    <body>\r\n    \r\n    @include('shared.navbar')\r\n    \r\n    @yield('content')\r\n    \r\n    </body>\r\n    </html>\r\n\r\n這個視圖看起來像首頁，但我們有改了一些東西，讓我們一行一行的來看程式：\r\n\r\n\r\n    <title> @yield('title') </title>\r\n\r\n我們用了 **@yield** 指令來從其他檔案取得標題，而不是直接把標題打在這裡。\r\n\r\n\r\n    @include('shared.navbar')\r\n\r\n我們用了 **@include** 指令來引入其他 Blade 視圖。你會注意到我們嵌入了一個叫做 **navbar（導覽列）** 的視圖在這。\r\n\r\n然而，我們還沒有那個導覽列的視圖，讓我們來新增一個 **shared** 資料夾，然後把 **navbar.blade.php** 放在這裡面。\r\n\r\n複製 Twitter Bootstrap 導覽列，然後把它貼進 **navbar.blade.php** 裡面：\r\n\r\n    <nav class=\"navbar navbar-default\">\r\n        <div class=\"container-fluid\">\r\n            <!-- Brand and toggle get grouped for better mobile display -->\r\n            <div class=\"navbar-header\">\r\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\r\n                    <span class=\"sr-only\">Toggle navigation</span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                </button>\r\n                <a class=\"navbar-brand\" href=\"#\">Brand</a>\r\n            </div>\r\n    \r\n            <!-- Collect the nav links, forms, and other content for toggling -->\r\n            <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n                <ul class=\"nav navbar-nav\">\r\n                    <li class=\"active\"><a href=\"#\">Link <span class=\"sr-only\">(current)</span></a></li>\r\n                    <li><a href=\"#\">Link</a></li>\r\n                    <li class=\"dropdown\">\r\n                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\r\n                        <ul class=\"dropdown-menu\" role=\"menu\">\r\n                            <li><a href=\"#\">Action</a></li>\r\n                            <li><a href=\"#\">Another action</a></li>\r\n                            <li><a href=\"#\">Something else here</a></li>\r\n                            <li class=\"divider\"></li>\r\n                            <li><a href=\"#\">Separated link</a></li>\r\n                            <li class=\"divider\"></li>\r\n                            <li><a href=\"#\">One more separated link</a></li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n                <form class=\"navbar-form navbar-left\" role=\"search\">\r\n                    <div class=\"form-group\">\r\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Search\">\r\n                    </div>\r\n                    <button type=\"submit\" class=\"btn btn-default\">Submit</button>\r\n                </form>\r\n                <ul class=\"nav navbar-nav navbar-right\">\r\n                    <li><a href=\"#\">Link</a></li>\r\n                    <li class=\"dropdown\">\r\n                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Dropdown <span class=\"caret\"></span></a>\r\n                        <ul class=\"dropdown-menu\" role=\"menu\">\r\n                            <li><a href=\"#\">Action</a></li>\r\n                            <li><a href=\"#\">Another action</a></li>\r\n                            <li><a href=\"#\">Something else here</a></li>\r\n                            <li class=\"divider\"></li>\r\n                            <li><a href=\"#\">Separated link</a></li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div><!-- /.navbar-collapse -->\r\n        </div><!-- /.container-fluid -->\r\n    </nav>\r\n\r\n> 你可以把 shares 資料夾命名為 partials、embed或其他你喜歡的。\r\n\r\n    @yield('content')\r\n\r\n如你所看到，他對我們而言非常方便，他不直接在這顯示其他頁的內容。我們使用 **@yield** 指令來引入另外一個試圖中叫做 **content** 的區塊。\r\n\r\n很好！你剛創建了一個主要排版！\r\n\r\n### 繼承主要排版\r\n\r\n現在我們可以改變 **首頁** 視圖來繼承我們的主要排版。\r\n\r\n    @extends('master')\r\n    @section('title', 'Home')\r\n    \r\n    @section('content')\r\n        <div class=\"container\">\r\n            <div class=\"content\">\r\n                <div class=\"title\">Home Page</div>\r\n                <div class=\"quote\">Our Home page!</div>\r\n            </div>\r\n        </div>\r\n    @endsection\r\n\r\n你可以看到我們使用 **@extends** 指令來繼承我們的 **主要排版**。\r\n\r\n為了設置我們的首頁的標題，我們用了 **@section** 指令。\r\n\r\n    @section('title', 'Home')\r\n    \r\n這是一個方便的方法。如果我們有很長的內容，我們可以使用 **@section** 和 **@endsection** 來引入我們的 **內容** 到主要排版裡。\r\n\r\n    @section('content')\r\n        <div class=\"container\">\r\n            <div class=\"content\">\r\n                <div class=\"title\">Home Page</div>\r\n                <div class=\"quote\">Our Home page!</div>\r\n            </div>\r\n        </div>\r\n    @endsection\r\n\r\n重新整理你的瀏覽器，你會看到同樣的首頁，但這次我們的程式看起來更乾淨。\r\n\r\n![The home page using master layout](http://learninglaravel.net/img/book/chap2-pic7.png)\r\n\r\n使用同樣的技術，我們可以簡單的改變「關於我們」、「聯絡我們」的頁面：\r\n\r\nabout.blade.php\r\n\r\n    @extends('master')\r\n    @section('title', 'About')\r\n    \r\n    @section('content')\r\n        <div class=\"container\">\r\n            <div class=\"content\">\r\n                <div class=\"title\">About Page</div>\r\n                <div class=\"quote\">Our about page!</div>\r\n            </div>\r\n        </div>\r\n    @endsection\r\n\r\ncontact.blade.php\r\n\r\n    @extends('master')\r\n    @section('title', 'Contact')\r\n    \r\n    @section('content')\r\n        <div class=\"container\">\r\n            <div class=\"content\">\r\n                <div class=\"title\">Contact Page</div>\r\n                <div class=\"quote\">Our contact page!</div>\r\n            </div>\r\n        </div>\r\n    @endsection\r\n\r\n![new about page](http://learninglaravel.net/img/book/chap2-pic11.png)\r\n\r\n## 使用其他 Bootstrap 主題\r\n\r\nTwitter Bootstrap 最大的好處就是有一堆主題提供你隨時切換。如果你不喜歡預設的 Bootstrap 主題，你可以簡單地找到其他的，然後使用它。這裡有一些有名的 Bootstrap 主題：\r\n\r\n1. [http://bootswatch.com](http://bootswatch.com)\r\n\r\n2. [http://fezvrasta.github.io/bootstrap-material-design](http://fezvrasta.github.io/bootstrap-material-design)\r\n\r\n3. [http://designmodo.github.io/Flat-UI](http://designmodo.github.io/Flat-UI)\r\n\r\n在這個章節，我們打算在我們的網站使用 **Bootstrap Material Design** 主題。\r\n\r\n這個 Bootstrap 主題會「提供我們一個方便的方法來使用新的 Google Material Design 指導方針」，如果你是使用 Android 手機，你一定曾經看過 Material Design。你可以從這裡瞭解更多 Material Design 的事情：\r\n\r\n[http://www.google.com/design/spec/material-design/introduction.html](http://www.google.com/design/spec/material-design/introduction.html)\r\n\r\n這個章節是設計來測試你對於Laravel 5 架構、視圖的知識。我還會向你介紹如果管你的 assets。你可以自行決定你打算使用哪個主題。我們也為我們這本書裡面的所有應用程式寫了一個模板。\r\n\r\n首先，打開下面的連結：\r\n\r\n[https://github.com/FezVrasta/bootstrap-material-design](https://github.com/FezVrasta/bootstrap-material-design)\r\n\r\n下載這個 zip 檔案。解壓縮他。到 **dist** 資料夾裡面。裡面有三個資料夾：\r\n\r\n1. css\r\n2. js\r\n3. fonts\r\n\r\n複製 **css**、**fonts** 與 **js** 資料夾到我們的 **Laravel public** 資料夾。**(~/Code/Laravel/public)**。\r\n\r\n打開 **master.blade.php**，修改裡面的內容：\r\n\r\n    <html>\r\n    <head>\r\n        <title> @yield('title') </title>\r\n        <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n        <!-- Include roboto.css to use the Roboto web font, material.css to include the theme and ripples.css to style the ripple effect -->\r\n        <link href=\"/css/roboto.min.css\" rel=\"stylesheet\">\r\n        <link href=\"/css/material.min.css\" rel=\"stylesheet\">\r\n        <link href=\"/css/ripples.min.css\" rel=\"stylesheet\">\r\n    \r\n    </head>\r\n    <body>\r\n    \r\n    @include('shared.navbar')\r\n    \r\n    \r\n    @yield('content')\r\n    \r\n    \r\n    <script src=\"//code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n    <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js\"></script>\r\n    \r\n    <script src=\"/js/ripples.min.js\"></script>\r\n    <script src=\"/js/material.min.js\"></script>\r\n    <script>\r\n        $(document).ready(function() {\r\n            // This command is used to initialize some elements and make them work properly\r\n            $.material.init();\r\n        });\r\n    </script>\r\n    </body>\r\n    \r\n    \r\n    </html>\r\n\r\n恭喜！你現在有一個漂亮的 Material Design 網站！\r\n\r\n![Material Design home page](http://learninglaravel.net/img/book/chap2-pic12.png)\r\n\r\n## 改善我們的網站排版\r\n\r\n目前，這個網站看起來很亂，我們要來更改一些東西，並重新設計所有的頁面來使我們的應用程式看起來更好看、更專業。\r\n\r\n### 更改導覽列\r\n\r\n打開 **navbar.blade.php**，更新他：\r\n\r\n    <nav class=\"navbar navbar-default\">\r\n        <div class=\"container-fluid\">\r\n            <!-- Brand and toggle get grouped for better mobile display -->\r\n            <div class=\"navbar-header\">\r\n                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\">\r\n                    <span class=\"sr-only\">Toggle navigation</span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                    <span class=\"icon-bar\"></span>\r\n                </button>\r\n                <a class=\"navbar-brand\" href=\"#\">Learning Laravel</a>\r\n            </div>\r\n    \r\n            <!-- Navbar Right -->\r\n            <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n                <ul class=\"nav navbar-nav navbar-right\">\r\n                    <li class=\"active\"><a href=\"/\">Home</a></li>\r\n                    <li><a href=\"/about\">About</a></li>\r\n                    <li><a href=\"/contact\">Contact</a></li>\r\n                    <li class=\"dropdown\">\r\n                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-expanded=\"false\">Member <span class=\"caret\"></span></a>\r\n                        <ul class=\"dropdown-menu\" role=\"menu\">\r\n                            <li><a href=\"/users/register\">Register</a></li>\r\n                            <li><a href=\"/users/login\">Login</a></li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n\r\n![A new navbar](http://learninglaravel.net/img/book/chap2-pic13.png)\r\n\r\n### 更改首頁\r\n\r\n打開 **home.blade.php**，更新他：\r\n\r\n    @extends('master')\r\n    @section('title', 'Home')\r\n    \r\n    @section('content')\r\n    \r\n        <div class=\"container\">\r\n            <div class=\"row banner\">\r\n    \r\n                <div class=\"col-md-12\">\r\n    \r\n                    <h1 class=\"text-center margin-top-100 editContent\">\r\n                        Learning Laravel 5\r\n                    </h1>\r\n    \r\n                    <h3 class=\"text-center margin-top-100 editContent\">Building Practical Applications</h3>\r\n    \r\n                    <div class=\"text-center\">\r\n                        <img src=\"http://learninglaravel.net/img/LearningLaravel5_cover0.png\" width=\"302\" height=\"391\" alt=\"\">\r\n                    </div>\r\n    \r\n                </div>\r\n    \r\n            </div>\r\n        </div>\r\n    \r\n    @endsection\r\n\r\n![The new home page](http://learninglaravel.net/img/book/chap2-pic14.png)\r\n\r\n現在我們有一個響應式的首頁。\r\n\r\n![Responsive website](http://learninglaravel.net/img/book/chap2-pic15.png)\r\n\r\n你可以試著導覽到「關於我們」、「聯絡我們」的頁面，檢查看看是不是都正常運作。\r\n\r\n你可以自己把一些小東西，例如圖片、內容、顏色與字體，換成你喜歡的。\r\n\r\n## 章節二總結\r\n\r\n做得好！我們現在有一個完整響應式的模板！我們會用這個模板來創建其他應用程式，來學習更多Laravel。\r\n\r\n在這章節，你學到很多東西：\r\n\r\n1. 你學習了 Laravel 架構、Laravel 怎麼運作並且知道要在哪裡放檔案。\r\n\r\n2. 你學習了 Laravel 的路由設定。\r\n\r\n3. 你學習了控制器。現在你可以使用控制器來新增網頁。\r\n\r\n4. 你知道了什麼是 Blade。你可以非常輕鬆替你下一個厲害的應用程式新增一個 Blade 模板。\r\n\r\n5. 你知道如何整合 Twitter Bootstrap、CSS、JS 與應用不同的 Bootstrap 主題。\r\n\r\n6. 你知道什麼是 Elixir、怎麼安裝 Gulp 並且知道怎麼樣新增一個簡單的 Gulp 任務。\r\n\r\n在下一個章節，我們會學到如何創建一個基本的 CRUD（Create 創建、Read 讀取、Update 更新、Delete 刪除）應用程式，並學習更多 Laravel 的特點。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}